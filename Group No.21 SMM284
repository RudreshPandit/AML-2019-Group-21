{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# Gradient descent"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "60n2Pc2pt4HZ"
   },
   "source": [
    "\n",
    "The chosen formula is the Three hump camel function which is U-shaped. It is a two dimensional function and has 3 local minima\n",
    "  The formulae for the three humped function is given as: \n",
    " f(x) = 2x^2 - 1.05x^4 + (x^6/6) + x*y + y^2 \n",
    " \n",
    " 1. Find the gradient at an initial point\n",
    " 2. If it is close to tolerance level we return these as minimum values for our function\n",
    " 3. Otherwise iterate until the gradient of the tangent is close to the tolerance level\n",
    "\n",
    "Iterate as follows:\n",
    " 1. Find the new point by taking a step in the downward direction. This is signified by negative sign. \n",
    " 2. The new point is calculated by multiplying step size with gradient of last step.\n",
    " 3. Find the gradient at this new step.\n",
    " 4. If it is close to tolerance then stop else repeat process by moving down the function"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## import libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-07-11T23:18:23.699201Z",
     "start_time": "2019-07-11T23:18:23.673907Z"
    },
    "colab": {},
    "colab_type": "code",
    "id": "QNRX0SeNt4He"
   },
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "import pandas as pd\n",
    "from mpl_toolkits import mplot3d #importing mplot for graphical representation and 3D plotting\n",
    "import matplotlib \n",
    "import matplotlib.pyplot as plt #to make interactive graphs\n",
    "%matplotlib inline "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## define functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-07-11T23:18:24.285467Z",
     "start_time": "2019-07-11T23:18:24.277421Z"
    },
    "colab": {},
    "colab_type": "code",
    "id": "KLFDrmout4Hq"
   },
   "outputs": [],
   "source": [
    "def l_f(x, y):\n",
    "    # Cost function\n",
    "    return  (2*x**2) - (1.05*x**4) + ((x**6)/6) + (x*y) + (y**2)\n",
    "    \n",
    "def g_f1(x,y): #partial derivative of cost function wrt x\n",
    "    \n",
    "    return (4*x)- (4.2*(x**3)) + (x**5) + y\n",
    "             \n",
    "def g_f2(x,y): #partial derivative of cost function wrt x\n",
    "    \n",
    "    return x + (2*y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-07-11T23:18:24.361560Z",
     "start_time": "2019-07-11T23:18:24.348317Z"
    },
    "colab": {},
    "colab_type": "code",
    "id": "2DtDQUSCt4Hv"
   },
   "outputs": [],
   "source": [
    "def g_d(eta=0.0001,iteration=10000):  \n",
    "    #initializing empty lists\n",
    "    l1=[]\n",
    "    loss_l=[] \n",
    "    x_l=[]\n",
    "    y_l=[]\n",
    "    x_l_g=[] #gradient lists\n",
    "    y_l_g=[]\n",
    "    # choosing the starting point \n",
    "    x=1\n",
    "    y=1\n",
    "    g_x = g_f1(x,y) \n",
    "    g_y = g_f2(x,y) \n",
    "    tol = 1e-5 #defining tolerance level\n",
    "    l1.append([x,y]) \n",
    "    x_l.append(x) # input new values of x\n",
    "    y_l.append(y) #input new values of y\n",
    "    x_l_g.append(g_x) # list of gradients of x\n",
    "    y_l_g.append(g_y) # list of gradients of y\n",
    "    loss = l_f(x,y) # calculating cost function values\n",
    "    loss_l.append(loss) # and storing in a separate list\n",
    "    g_x = g_f1(x,y) # partial derivative for loss_function with respect to x\n",
    "    g_y = g_f2(x,y) # partial derivative for loss_function with respect to y\n",
    "    grad = g_x + g_y \n",
    "\n",
    "    for i in range(0,iteration):\n",
    "        if g_x < tol: #iterate till gradient falls below a particular level\n",
    "            break\n",
    "        else:\n",
    "            x += -eta * g_x #iterating new values of x\n",
    "            g_x = g_f1(x,y)\n",
    "            x_l_g.append(g_x)\n",
    "            x_l.append(x)\n",
    "            g_y = g_f2(x,y)\n",
    "            y += -eta * g_y #iterating new values of y\n",
    "            y_l_g.append(g_y)\n",
    "            y_l.append(y)\n",
    "            l1.append([x,y])\n",
    "            loss = l_f(x,y)\n",
    "            loss_l.append(loss)\n",
    "    return x_l,y_l,loss_l,x_l_g,y_l_g,x,y\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-07-11T23:01:44.355243Z",
     "start_time": "2019-07-11T23:01:44.301Z"
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-07-11T23:18:24.830078Z",
     "start_time": "2019-07-11T23:18:24.819860Z"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "990"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "l_s = np.arange(0.0001,0.01,0.00001)\n",
    "len(l_s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-07-11T23:18:35.379916Z",
     "start_time": "2019-07-11T23:18:25.085604Z"
    }
   },
   "outputs": [],
   "source": [
    "iteration = 10000\n",
    "sizes = []\n",
    "steps = []\n",
    "x_min = []\n",
    "y_min = []\n",
    "losses = []\n",
    "for i in l_s:\n",
    "    x_l, y_l, loss_l, x_l_g, y_l_g, x, y = g_d(\n",
    "        i, iteration)\n",
    "    sizes.append(i)\n",
    "    #losses.append(min(loss_list))\n",
    "    steps.append(len(x_l_g))\n",
    "    x_min.append(min(x_l_g))\n",
    "    y_min.append(min(y_l_g))\n",
    "\n",
    "    losses.append(l_f(x, y))\n",
    "    new = pd.DataFrame({\n",
    "        'loss': losses,\n",
    "        'no_steps': steps,\n",
    "        'x_list': x_min,\n",
    "        'y_list': y_min,\n",
    "        'size': sizes\n",
    "    })"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-07-11T23:18:35.581650Z",
     "start_time": "2019-07-11T23:18:35.520030Z"
    },
    "code_folding": [],
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>loss</th>\n",
       "      <th>no_steps</th>\n",
       "      <th>x_list</th>\n",
       "      <th>y_list</th>\n",
       "      <th>size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.005119</td>\n",
       "      <td>10001</td>\n",
       "      <td>5.821785e-02</td>\n",
       "      <td>0.142779</td>\n",
       "      <td>0.00010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.003309</td>\n",
       "      <td>10001</td>\n",
       "      <td>2.860998e-02</td>\n",
       "      <td>0.113116</td>\n",
       "      <td>0.00011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.002237</td>\n",
       "      <td>10001</td>\n",
       "      <td>1.086520e-02</td>\n",
       "      <td>0.090918</td>\n",
       "      <td>0.00012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.001557</td>\n",
       "      <td>10001</td>\n",
       "      <td>5.583524e-04</td>\n",
       "      <td>0.073978</td>\n",
       "      <td>0.00013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.001518</td>\n",
       "      <td>9339</td>\n",
       "      <td>8.586510e-06</td>\n",
       "      <td>0.072902</td>\n",
       "      <td>0.00014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.001518</td>\n",
       "      <td>8716</td>\n",
       "      <td>9.996934e-06</td>\n",
       "      <td>0.072914</td>\n",
       "      <td>0.00015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.001518</td>\n",
       "      <td>8171</td>\n",
       "      <td>9.948112e-06</td>\n",
       "      <td>0.072923</td>\n",
       "      <td>0.00016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.001518</td>\n",
       "      <td>7691</td>\n",
       "      <td>-1.046911e-06</td>\n",
       "      <td>0.072910</td>\n",
       "      <td>0.00017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.001519</td>\n",
       "      <td>7263</td>\n",
       "      <td>5.470631e-06</td>\n",
       "      <td>0.072932</td>\n",
       "      <td>0.00018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.001519</td>\n",
       "      <td>6881</td>\n",
       "      <td>-1.146911e-06</td>\n",
       "      <td>0.072928</td>\n",
       "      <td>0.00019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.001520</td>\n",
       "      <td>6536</td>\n",
       "      <td>9.754677e-06</td>\n",
       "      <td>0.072959</td>\n",
       "      <td>0.00020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0.001520</td>\n",
       "      <td>6225</td>\n",
       "      <td>3.133827e-06</td>\n",
       "      <td>0.072955</td>\n",
       "      <td>0.00021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0.001520</td>\n",
       "      <td>5942</td>\n",
       "      <td>8.946060e-07</td>\n",
       "      <td>0.072959</td>\n",
       "      <td>0.00022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0.001521</td>\n",
       "      <td>5683</td>\n",
       "      <td>8.880824e-06</td>\n",
       "      <td>0.072984</td>\n",
       "      <td>0.00023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0.001521</td>\n",
       "      <td>5446</td>\n",
       "      <td>9.564208e-06</td>\n",
       "      <td>0.072995</td>\n",
       "      <td>0.00024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0.001521</td>\n",
       "      <td>5228</td>\n",
       "      <td>9.517054e-06</td>\n",
       "      <td>0.073004</td>\n",
       "      <td>0.00025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>0.001521</td>\n",
       "      <td>5027</td>\n",
       "      <td>5.084434e-06</td>\n",
       "      <td>0.073004</td>\n",
       "      <td>0.00026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>0.001521</td>\n",
       "      <td>4841</td>\n",
       "      <td>-1.539511e-06</td>\n",
       "      <td>0.073000</td>\n",
       "      <td>0.00027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>0.001521</td>\n",
       "      <td>4668</td>\n",
       "      <td>-2.318365e-06</td>\n",
       "      <td>0.073007</td>\n",
       "      <td>0.00028</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>0.001522</td>\n",
       "      <td>4507</td>\n",
       "      <td>-4.558435e-06</td>\n",
       "      <td>0.073012</td>\n",
       "      <td>0.00029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>0.001523</td>\n",
       "      <td>4356</td>\n",
       "      <td>9.284073e-06</td>\n",
       "      <td>0.073048</td>\n",
       "      <td>0.00030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>0.001522</td>\n",
       "      <td>4216</td>\n",
       "      <td>-5.385634e-06</td>\n",
       "      <td>0.073028</td>\n",
       "      <td>0.00031</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>0.001523</td>\n",
       "      <td>4084</td>\n",
       "      <td>-2.509913e-06</td>\n",
       "      <td>0.073043</td>\n",
       "      <td>0.00032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>0.001523</td>\n",
       "      <td>3960</td>\n",
       "      <td>3.675733e-07</td>\n",
       "      <td>0.073058</td>\n",
       "      <td>0.00033</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>0.001523</td>\n",
       "      <td>3844</td>\n",
       "      <td>-1.429894e-05</td>\n",
       "      <td>0.073037</td>\n",
       "      <td>0.00034</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>0.001523</td>\n",
       "      <td>3734</td>\n",
       "      <td>-1.288635e-05</td>\n",
       "      <td>0.073049</td>\n",
       "      <td>0.00035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>0.001524</td>\n",
       "      <td>3630</td>\n",
       "      <td>-8.548835e-06</td>\n",
       "      <td>0.073067</td>\n",
       "      <td>0.00036</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>0.001523</td>\n",
       "      <td>3532</td>\n",
       "      <td>-1.444481e-05</td>\n",
       "      <td>0.073064</td>\n",
       "      <td>0.00037</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>0.001524</td>\n",
       "      <td>3439</td>\n",
       "      <td>-1.595494e-05</td>\n",
       "      <td>0.073070</td>\n",
       "      <td>0.00038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>0.001525</td>\n",
       "      <td>3350</td>\n",
       "      <td>4.482209e-06</td>\n",
       "      <td>0.073120</td>\n",
       "      <td>0.00039</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>960</th>\n",
       "      <td>0.001843</td>\n",
       "      <td>131</td>\n",
       "      <td>-6.923333e-05</td>\n",
       "      <td>0.081681</td>\n",
       "      <td>0.00970</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>961</th>\n",
       "      <td>0.001835</td>\n",
       "      <td>131</td>\n",
       "      <td>-1.818464e-04</td>\n",
       "      <td>0.081468</td>\n",
       "      <td>0.00971</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>962</th>\n",
       "      <td>0.001826</td>\n",
       "      <td>131</td>\n",
       "      <td>-2.935667e-04</td>\n",
       "      <td>0.081256</td>\n",
       "      <td>0.00972</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>963</th>\n",
       "      <td>0.001818</td>\n",
       "      <td>131</td>\n",
       "      <td>-4.044001e-04</td>\n",
       "      <td>0.081044</td>\n",
       "      <td>0.00973</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>964</th>\n",
       "      <td>0.001810</td>\n",
       "      <td>131</td>\n",
       "      <td>-5.143521e-04</td>\n",
       "      <td>0.080834</td>\n",
       "      <td>0.00974</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>965</th>\n",
       "      <td>0.001802</td>\n",
       "      <td>131</td>\n",
       "      <td>-6.234284e-04</td>\n",
       "      <td>0.080624</td>\n",
       "      <td>0.00975</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>966</th>\n",
       "      <td>0.001794</td>\n",
       "      <td>131</td>\n",
       "      <td>-7.316346e-04</td>\n",
       "      <td>0.080414</td>\n",
       "      <td>0.00976</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>967</th>\n",
       "      <td>0.001848</td>\n",
       "      <td>130</td>\n",
       "      <td>-4.137186e-05</td>\n",
       "      <td>0.081804</td>\n",
       "      <td>0.00977</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>968</th>\n",
       "      <td>0.001839</td>\n",
       "      <td>130</td>\n",
       "      <td>-1.534919e-04</td>\n",
       "      <td>0.081592</td>\n",
       "      <td>0.00978</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>969</th>\n",
       "      <td>0.001831</td>\n",
       "      <td>130</td>\n",
       "      <td>-2.647301e-04</td>\n",
       "      <td>0.081381</td>\n",
       "      <td>0.00979</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>970</th>\n",
       "      <td>0.001823</td>\n",
       "      <td>130</td>\n",
       "      <td>-3.750922e-04</td>\n",
       "      <td>0.081171</td>\n",
       "      <td>0.00980</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>971</th>\n",
       "      <td>0.001815</td>\n",
       "      <td>130</td>\n",
       "      <td>-4.845837e-04</td>\n",
       "      <td>0.080961</td>\n",
       "      <td>0.00981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>972</th>\n",
       "      <td>0.001807</td>\n",
       "      <td>130</td>\n",
       "      <td>-5.932101e-04</td>\n",
       "      <td>0.080752</td>\n",
       "      <td>0.00982</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>973</th>\n",
       "      <td>0.001799</td>\n",
       "      <td>130</td>\n",
       "      <td>-7.009769e-04</td>\n",
       "      <td>0.080544</td>\n",
       "      <td>0.00983</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>974</th>\n",
       "      <td>0.001853</td>\n",
       "      <td>129</td>\n",
       "      <td>-1.568641e-06</td>\n",
       "      <td>0.081949</td>\n",
       "      <td>0.00984</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>975</th>\n",
       "      <td>0.001845</td>\n",
       "      <td>129</td>\n",
       "      <td>-1.132853e-04</td>\n",
       "      <td>0.081739</td>\n",
       "      <td>0.00985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>976</th>\n",
       "      <td>0.001837</td>\n",
       "      <td>129</td>\n",
       "      <td>-2.241306e-04</td>\n",
       "      <td>0.081529</td>\n",
       "      <td>0.00986</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>977</th>\n",
       "      <td>0.001829</td>\n",
       "      <td>129</td>\n",
       "      <td>-3.341099e-04</td>\n",
       "      <td>0.081320</td>\n",
       "      <td>0.00987</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>978</th>\n",
       "      <td>0.001821</td>\n",
       "      <td>129</td>\n",
       "      <td>-4.432287e-04</td>\n",
       "      <td>0.081112</td>\n",
       "      <td>0.00988</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>979</th>\n",
       "      <td>0.001813</td>\n",
       "      <td>129</td>\n",
       "      <td>-5.514924e-04</td>\n",
       "      <td>0.080904</td>\n",
       "      <td>0.00989</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>980</th>\n",
       "      <td>0.001804</td>\n",
       "      <td>129</td>\n",
       "      <td>-6.589064e-04</td>\n",
       "      <td>0.080697</td>\n",
       "      <td>0.00990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>981</th>\n",
       "      <td>0.001796</td>\n",
       "      <td>129</td>\n",
       "      <td>-7.654759e-04</td>\n",
       "      <td>0.080491</td>\n",
       "      <td>0.00991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>982</th>\n",
       "      <td>0.001852</td>\n",
       "      <td>128</td>\n",
       "      <td>-6.108549e-05</td>\n",
       "      <td>0.081910</td>\n",
       "      <td>0.00992</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>983</th>\n",
       "      <td>0.001844</td>\n",
       "      <td>128</td>\n",
       "      <td>-1.716257e-04</td>\n",
       "      <td>0.081701</td>\n",
       "      <td>0.00993</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>984</th>\n",
       "      <td>0.001835</td>\n",
       "      <td>128</td>\n",
       "      <td>-2.813095e-04</td>\n",
       "      <td>0.081493</td>\n",
       "      <td>0.00994</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>985</th>\n",
       "      <td>0.001827</td>\n",
       "      <td>128</td>\n",
       "      <td>-3.901424e-04</td>\n",
       "      <td>0.081286</td>\n",
       "      <td>0.00995</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>986</th>\n",
       "      <td>0.001819</td>\n",
       "      <td>128</td>\n",
       "      <td>-4.981295e-04</td>\n",
       "      <td>0.081079</td>\n",
       "      <td>0.00996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>987</th>\n",
       "      <td>0.001811</td>\n",
       "      <td>128</td>\n",
       "      <td>-6.052762e-04</td>\n",
       "      <td>0.080873</td>\n",
       "      <td>0.00997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>988</th>\n",
       "      <td>0.001803</td>\n",
       "      <td>128</td>\n",
       "      <td>-7.115877e-04</td>\n",
       "      <td>0.080668</td>\n",
       "      <td>0.00998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>989</th>\n",
       "      <td>0.001859</td>\n",
       "      <td>127</td>\n",
       "      <td>3.280331e-06</td>\n",
       "      <td>0.082104</td>\n",
       "      <td>0.00999</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>990 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         loss  no_steps        x_list    y_list     size\n",
       "0    0.005119     10001  5.821785e-02  0.142779  0.00010\n",
       "1    0.003309     10001  2.860998e-02  0.113116  0.00011\n",
       "2    0.002237     10001  1.086520e-02  0.090918  0.00012\n",
       "3    0.001557     10001  5.583524e-04  0.073978  0.00013\n",
       "4    0.001518      9339  8.586510e-06  0.072902  0.00014\n",
       "5    0.001518      8716  9.996934e-06  0.072914  0.00015\n",
       "6    0.001518      8171  9.948112e-06  0.072923  0.00016\n",
       "7    0.001518      7691 -1.046911e-06  0.072910  0.00017\n",
       "8    0.001519      7263  5.470631e-06  0.072932  0.00018\n",
       "9    0.001519      6881 -1.146911e-06  0.072928  0.00019\n",
       "10   0.001520      6536  9.754677e-06  0.072959  0.00020\n",
       "11   0.001520      6225  3.133827e-06  0.072955  0.00021\n",
       "12   0.001520      5942  8.946060e-07  0.072959  0.00022\n",
       "13   0.001521      5683  8.880824e-06  0.072984  0.00023\n",
       "14   0.001521      5446  9.564208e-06  0.072995  0.00024\n",
       "15   0.001521      5228  9.517054e-06  0.073004  0.00025\n",
       "16   0.001521      5027  5.084434e-06  0.073004  0.00026\n",
       "17   0.001521      4841 -1.539511e-06  0.073000  0.00027\n",
       "18   0.001521      4668 -2.318365e-06  0.073007  0.00028\n",
       "19   0.001522      4507 -4.558435e-06  0.073012  0.00029\n",
       "20   0.001523      4356  9.284073e-06  0.073048  0.00030\n",
       "21   0.001522      4216 -5.385634e-06  0.073028  0.00031\n",
       "22   0.001523      4084 -2.509913e-06  0.073043  0.00032\n",
       "23   0.001523      3960  3.675733e-07  0.073058  0.00033\n",
       "24   0.001523      3844 -1.429894e-05  0.073037  0.00034\n",
       "25   0.001523      3734 -1.288635e-05  0.073049  0.00035\n",
       "26   0.001524      3630 -8.548835e-06  0.073067  0.00036\n",
       "27   0.001523      3532 -1.444481e-05  0.073064  0.00037\n",
       "28   0.001524      3439 -1.595494e-05  0.073070  0.00038\n",
       "29   0.001525      3350  4.482209e-06  0.073120  0.00039\n",
       "..        ...       ...           ...       ...      ...\n",
       "960  0.001843       131 -6.923333e-05  0.081681  0.00970\n",
       "961  0.001835       131 -1.818464e-04  0.081468  0.00971\n",
       "962  0.001826       131 -2.935667e-04  0.081256  0.00972\n",
       "963  0.001818       131 -4.044001e-04  0.081044  0.00973\n",
       "964  0.001810       131 -5.143521e-04  0.080834  0.00974\n",
       "965  0.001802       131 -6.234284e-04  0.080624  0.00975\n",
       "966  0.001794       131 -7.316346e-04  0.080414  0.00976\n",
       "967  0.001848       130 -4.137186e-05  0.081804  0.00977\n",
       "968  0.001839       130 -1.534919e-04  0.081592  0.00978\n",
       "969  0.001831       130 -2.647301e-04  0.081381  0.00979\n",
       "970  0.001823       130 -3.750922e-04  0.081171  0.00980\n",
       "971  0.001815       130 -4.845837e-04  0.080961  0.00981\n",
       "972  0.001807       130 -5.932101e-04  0.080752  0.00982\n",
       "973  0.001799       130 -7.009769e-04  0.080544  0.00983\n",
       "974  0.001853       129 -1.568641e-06  0.081949  0.00984\n",
       "975  0.001845       129 -1.132853e-04  0.081739  0.00985\n",
       "976  0.001837       129 -2.241306e-04  0.081529  0.00986\n",
       "977  0.001829       129 -3.341099e-04  0.081320  0.00987\n",
       "978  0.001821       129 -4.432287e-04  0.081112  0.00988\n",
       "979  0.001813       129 -5.514924e-04  0.080904  0.00989\n",
       "980  0.001804       129 -6.589064e-04  0.080697  0.00990\n",
       "981  0.001796       129 -7.654759e-04  0.080491  0.00991\n",
       "982  0.001852       128 -6.108549e-05  0.081910  0.00992\n",
       "983  0.001844       128 -1.716257e-04  0.081701  0.00993\n",
       "984  0.001835       128 -2.813095e-04  0.081493  0.00994\n",
       "985  0.001827       128 -3.901424e-04  0.081286  0.00995\n",
       "986  0.001819       128 -4.981295e-04  0.081079  0.00996\n",
       "987  0.001811       128 -6.052762e-04  0.080873  0.00997\n",
       "988  0.001803       128 -7.115877e-04  0.080668  0.00998\n",
       "989  0.001859       127  3.280331e-06  0.082104  0.00999\n",
       "\n",
       "[990 rows x 5 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## graphics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### steps vs loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-07-11T23:18:36.190978Z",
     "start_time": "2019-07-11T23:18:35.781543Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot( new['no_steps'],new['loss'])\n",
    "plt.savefig('plot1')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## no_steps vs size "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-07-11T23:18:36.762213Z",
     "start_time": "2019-07-11T23:18:36.319362Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot( new['no_steps'],new['size'])\n",
    "plt.savefig('plot2')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-07-11T23:12:52.831943Z",
     "start_time": "2019-07-11T23:12:52.791352Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "ZOdqomi1t4H3",
    "outputId": "578064fc-6a91-44bc-8908-4aeb9c47ac04"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10001\n",
      "10001\n"
     ]
    }
   ],
   "source": [
    "iteration=10000\n",
    "\n",
    "x_l,y_l,loss_l,x_l_g,y_l_g,x,y=g_d(0.0001,10000)\n",
    "print(len(x_l_g))\n",
    "print(len(y_l_g))\n",
    "#---------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-07-11T14:10:58.526515Z",
     "start_time": "2019-07-11T14:10:58.509130Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 51
    },
    "colab_type": "code",
    "id": "k_lxAyEuHHMZ",
    "outputId": "99bed7ad-f420-487b-9339-40e8117105f7"
   },
   "source": [
    "\n",
    "### camel hump \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-07-11T23:19:42.298218Z",
     "start_time": "2019-07-11T23:19:41.609427Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 248
    },
    "colab_type": "code",
    "id": "4NT66BSpt4ID",
    "outputId": "80396859-2f69-4100-de90-77e8fd95ea57"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "x = np.linspace(-5, 5,30)\n",
    "y = np.linspace(-5, 5,30)\n",
    "xg, yg = np.meshgrid(x, y)\n",
    "fig = plt.figure()\n",
    "ax = fig.add_subplot(111, projection='3d')\n",
    "surf = ax.plot_surface(xg, yg, l_f(xg, yg), rstride=1, cstride=1,\n",
    "                       cmap=plt.cm.jet, linewidth=0, antialiased=False)\n",
    "ax.set_xlabel('x')\n",
    "ax.set_ylabel('y')\n",
    "ax.set_zlabel('f(x, y)')\n",
    "ax.set_title('Three-hump Camelback function')\n",
    "plt.savefig('plot3')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-07-11T23:13:58.161273Z",
     "start_time": "2019-07-11T23:13:55.024145Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 248
    },
    "colab_type": "code",
    "id": "wcEwUxlct4IN",
    "outputId": "2498c562-c994-4ae2-94b4-09e48af8e9e8",
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize Function\n",
    "a_x = plt.axes(projection='3d')\n",
    "a_x.scatter(x_l,y_l,loss_l, c=loss_l, cmap='viridis', linewidth=0.9);\n",
    "a_x.set_xlabel('x')\n",
    "a_x.set_ylabel('y')\n",
    "a_x.set_zlabel('Function');\n",
    "plt.savefig('plot4')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-07-11T23:13:58.504995Z",
     "start_time": "2019-07-11T23:13:58.496153Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "II2KGIx_t4IU",
    "outputId": "b388e2df-ac5d-4263-a18b-4a511f8a6005"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The minimum of (x,y) is [[-5.         -4.65517241 -4.31034483 -3.96551724 -3.62068966 -3.27586207\n",
      "  -2.93103448 -2.5862069  -2.24137931 -1.89655172 -1.55172414 -1.20689655\n",
      "  -0.86206897 -0.51724138 -0.17241379  0.17241379  0.51724138  0.86206897\n",
      "   1.20689655  1.55172414  1.89655172  2.24137931  2.5862069   2.93103448\n",
      "   3.27586207  3.62068966  3.96551724  4.31034483  4.65517241  5.        ]\n",
      " [-5.         -4.65517241 -4.31034483 -3.96551724 -3.62068966 -3.27586207\n",
      "  -2.93103448 -2.5862069  -2.24137931 -1.89655172 -1.55172414 -1.20689655\n",
      "  -0.86206897 -0.51724138 -0.17241379  0.17241379  0.51724138  0.86206897\n",
      "   1.20689655  1.55172414  1.89655172  2.24137931  2.5862069   2.93103448\n",
      "   3.27586207  3.62068966  3.96551724  4.31034483  4.65517241  5.        ]]\n"
     ]
    }
   ],
   "source": [
    "print('The minimum of (x,y) is {}'.format(np.round((x,y),10)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-07-11T23:14:39.185821Z",
     "start_time": "2019-07-11T23:14:39.181101Z"
    },
    "colab": {},
    "colab_type": "code",
    "id": "Ffu3X9Ept4Id"
   },
   "outputs": [],
   "source": [
    "def Cost(iter=10000):\n",
    "    cost_list=[]   \n",
    "    \n",
    "\n",
    "    for i in range(iter):\n",
    "        x_l,y_l,loss_l,x_l_g,y_l_g,x,y=g_d(0.001,i)\n",
    "        cost_function=l_f(x,y)\n",
    "        cost_list.append(cost_function)\n",
    "        \n",
    "    return cost_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-07-11T23:15:45.782631Z",
     "start_time": "2019-07-11T23:14:39.573319Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "CEzBB_kit4Ij",
    "outputId": "5b367a7d-825d-44b6-aed5-faf3fa3b3715"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10000"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iter=10000\n",
    "cost_function=Cost(iter)\n",
    "len(range(iter))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-07-11T23:15:47.559253Z",
     "start_time": "2019-07-11T23:15:46.121695Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 632
    },
    "colab_type": "code",
    "id": "383MUfOMt4It",
    "outputId": "5da5a6da-50e4-49de-d36b-0b2cf46c383d",
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0,0.5,'loss')"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "font = {'size': 12}\n",
    "matplotlib.rc('font', **font)\n",
    "\n",
    "figure = plt.figure(figsize=(10, 10))\n",
    "ax1 = figure.add_subplot(1, 1, 1)\n",
    "ax1.scatter(range(iter),cost_function,color='red',marker='*')\n",
    "ax1.set_xlabel('iteration')\n",
    "ax1.set_ylabel('loss')\n",
    "plt.savefig('plot5')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Zb0xS4DVt4I1"
   },
   "source": [
    "Reference for variants of Vanilla descent\n",
    "\n",
    "https://github.com/Niranjankumar-c/GradientDescent_Implementation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from matplotlib import cm\n",
    "import matplotlib.colors\n",
    "\n",
    "from matplotlib import animation, rc\n",
    "from IPython.display import HTML\n",
    "\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "class SN:\n",
    "  #constructor\n",
    "  def __init__(self, w_init, b_init, algo):\n",
    "    self.w = w_init\n",
    "    self.b = b_init\n",
    "    self.w_h = []\n",
    "    self.b_h = []\n",
    "    self.e_h = []\n",
    "    self.algo = algo\n",
    "  #logistic function  \n",
    "  def sigmoid(self, x, w=None, b=None):\n",
    "    if w is None:\n",
    "      w = self.w\n",
    "    if b is None:\n",
    "      b = self.b\n",
    "    return 1. / (1. + np.exp(-(w*x + b)))\n",
    "  #loss function\n",
    "  def error(self, X, Y, w=None, b=None):\n",
    "    if w is None:\n",
    "      w = self.w\n",
    "    if b is None:\n",
    "      b = self.b\n",
    "    err = 0\n",
    "    for x, y in zip(X, Y):\n",
    "      err += 0.5 * (self.sigmoid(x, w, b) - y) ** 2\n",
    "    return err\n",
    "  \n",
    "  def grad_w(self, x, y, w=None, b=None):\n",
    "    if w is None:\n",
    "      w = self.w\n",
    "    if b is None:\n",
    "      b = self.b\n",
    "    y_pred = self.sigmoid(x, w, b)\n",
    "    return (y_pred - y) * y_pred * (1 - y_pred) * x\n",
    "  \n",
    "  def grad_b(self, x, y, w=None, b=None):\n",
    "    if w is None:\n",
    "      w = self.w\n",
    "    if b is None:\n",
    "      b = self.b\n",
    "    y_pred = self.sigmoid(x, w, b)\n",
    "    return (y_pred - y) * y_pred * (1 - y_pred)\n",
    "  \n",
    "  def fit(self, X, Y, \n",
    "          epochs=100, eta=0.01, gamma=0.9, mini_batch_size=100, eps=1e-8,  \n",
    "          beta=0.9, beta1=0.9, beta2=0.9\n",
    "         ):\n",
    "    self.w_h = []\n",
    "    self.b_h = []\n",
    "    self.e_h = []\n",
    "    self.X = X\n",
    "    self.Y = Y\n",
    "    \n",
    "    if self.algo == 'GD':\n",
    "      for i in range(epochs):\n",
    "        dw, db = 0, 0\n",
    "        for x, y in zip(X, Y):\n",
    "          dw += self.grad_w(x, y)\n",
    "          db += self.grad_b(x, y)\n",
    "        self.w -= eta * dw / X.shape[0]\n",
    "        self.b -= eta * db / X.shape[0]\n",
    "        self.append_log()\n",
    "        \n",
    "    elif self.algo == 'MiniBatch':\n",
    "      for i in range(epochs):\n",
    "        dw, db = 0, 0\n",
    "        points_seen = 0\n",
    "        for x, y in zip(X, Y):\n",
    "          dw += self.grad_w(x, y)\n",
    "          db += self.grad_b(x, y)\n",
    "          points_seen += 1\n",
    "          if points_seen % mini_batch_size == 0:\n",
    "            self.w -= eta * dw / mini_batch_size\n",
    "            self.b -= eta * db / mini_batch_size\n",
    "            self.append_log()\n",
    "            dw, db = 0, 0\n",
    "        \n",
    "    elif self.algo == 'Momentum':\n",
    "      v_w, v_b = 0, 0\n",
    "      for i in range(epochs):\n",
    "        dw, db = 0, 0\n",
    "        for x, y in zip(X, Y):\n",
    "          dw += self.grad_w(x, y)\n",
    "          db += self.grad_b(x, y)\n",
    "        v_w = gamma * v_w + eta * dw \n",
    "        v_b = gamma * v_b + eta * db\n",
    "        self.w = self.w - v_w\n",
    "        self.b = self.b - v_b\n",
    "        self.append_log()\n",
    "        \n",
    "    elif self.algo == 'NAG':\n",
    "      v_w, v_b = 0, 0\n",
    "      for i in range(epochs):\n",
    "        dw, db = 0, 0\n",
    "        v_w = gamma * v_w\n",
    "        v_b = gamma * v_b\n",
    "        for x, y in zip(X, Y):\n",
    "          dw += self.grad_w(x, y, self.w - v_w, self.b - v_b)\n",
    "          db += self.grad_b(x, y, self.w - v_w, self.b - v_b)\n",
    "        v_w = v_w + eta * dw\n",
    "        v_b = v_b + eta * db\n",
    "        self.w = self.w - v_w\n",
    "        self.b = self.b - v_b\n",
    "        self.append_log()\n",
    "   #logging      \n",
    "  def append_log(self):\n",
    "    self.w_h.append(self.w)\n",
    "    self.b_h.append(self.b)\n",
    "    self.e_h.append(self.error(self.X, self.Y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Data\n",
    "X = np.asarray([3.5, 0.35, 3.2, -2.0, 1.5, -0.5])\n",
    "Y = np.asarray([0.5, 0.50, 0.5,  0.5, 0.1,  0.3])\n",
    "#Algo and parameter values\n",
    "algo = 'GD'\n",
    "w_init = 2.1\n",
    "b_init = 4.0\n",
    "#parameter min and max values- to plot update rule\n",
    "w_min = -7\n",
    "w_max = 5\n",
    "b_min = -7\n",
    "b_max = 5\n",
    "#learning algorithum options\n",
    "epochs = 200\n",
    "mini_batch_size = 6\n",
    "gamma = 0.9\n",
    "eta = 5\n",
    "#animation number of frames\n",
    "animation_frames = 20\n",
    "#plotting options\n",
    "plot_2d = True\n",
    "plot_3d = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sn = SN(w_init, b_init, algo)\n",
    "sn.fit(X, Y, epochs=epochs, eta=eta, gamma=gamma, mini_batch_size=mini_batch_size)\n",
    "plt.plot(sn.e_h, 'r')\n",
    "plt.plot(sn.w_h, 'b')\n",
    "plt.plot(sn.b_h, 'g')\n",
    "plt.legend(('error', 'weight', 'bias'))\n",
    "plt.title(\"Variation of Parameters and loss function\")\n",
    "plt.xlabel(\"Epoch\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "Q1_V3.ipynb",
   "provenance": [],
   "version": "0.3.2"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
